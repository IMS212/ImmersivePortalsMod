plugins {
    id 'java-library'
    id 'fabric-loom' version '0.10-SNAPSHOT' apply(false)
    id 'maven-publish'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/imm_ptl_peripheral.accesswidener")
}

repositories {
    flatDir {
        dirs 'deps'
    }
}

allprojects {
//    loom {
//        shareCaches = true
//    }

    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    version = rootProject.mod_version

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io'
        }
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        it.options.release = 16
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        //For Nullable
        compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

        modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        }
        modCompileOnly "com.terraformersmc:modmenu:${modmenu_version}"

        modCompileOnly('com.github.Virtuoel:Pehkui:fabric~1.14.4-1.17-SNAPSHOT') {
            transitive = false
        }

        // use online dependency to make sure other people can compile
        modCompileOnly('com.github.qouteall:sodium-fabric:28bdaff') {
            transitive = false
        }

        modCompileOnly 'com.github.qouteall:Iris:7bf9a90'

        // to test local iris+sodium
//        modImplementation('me.jellysquid.mods:sodium-fabric:0.3.2+IRIS2-rev.d5cd1c2'){
//            transitive = false
//        }
//        modImplementation "net.coderbot.iris_mc1_17:iris:1.1.2+"

    }

    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-$version-dev.jar")
            archiveName = "${archivesBaseName}-${version}-mc${project.minecraft_version}-fabric.jar"
        }

        artifacts {
//            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }

        processResources {
            inputs.property "version", project.version

            filesMatching("fabric.mod.json") {
                expand "version": project.version
            }
        }

    }

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this task, sources will not be generated.
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from "LICENSE"
}

subprojects {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-mc${project.minecraft_version}-fabric.jar")) {
                        builtBy remapJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}-mc${project.minecraft_version}-fabric.jar")) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

dependencies {

    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"
//    modImplementation "io.github.prospector:modmenu:${modmenu_version}"
//
    include "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"
//    include "io.github.prospector:modmenu:${modmenu_version}"


//    modImplementation ('com.github.qouteall:MiniScaledMod:e4c0d34'){
//        exclude module: 'imm_ptl_core'
//        exclude module: 'q_misc_util'
//    }

//    modImplementation 'com.github.CaffeineMC:phosphor-fabric:mc1.16.2-v0.7.1'

    //make the game launch faster in dev
//    modRuntime("com.github.SuperCoder7979:databreaker:master-SNAPSHOT") {
//        exclude module: "fabric-loader"
//    }

//    modImplementation('com.github.LTHeaven:InnerDimensionMod:main-SNAPSHOT'){
//        exclude module: "imm_ptl_core"
//    }

    // OptiFine
//    modImplementation 'com.github.qouteall:OptiFabric:llama-SNAPSHOT'
//    modImplementation "com.github.Chocohead:Fabric-ASM:v2.1"
//    compile 'org.zeroturnaround:zt-zip:1.13'
//    compile('net.fabricmc:stitch:0.5.1+build.77') {
//        transitive = false
//    }


    fileTree(dir: 'deps', include: '*.jar').each {
        String baseName = it.name.replace(".jar", "")
        String version = "0.1.0"
        int split = baseName.lastIndexOf('-')

        if (split != -1) {
            version = baseName.substring(split + 1)
            baseName = baseName.substring(0, split)
        }

        String name = "testmod:${baseName}:${version}"

        System.out.println("Found test mod: " + it.name.replace(".jar", "") + " -> " + name)

        modImplementation name
//        modCompileOnly name
//        modRuntime name
    }
}

dependencies {
    subprojects.each {
        api project(":${it.name}")
        include project("${it.name}:")
    }
}

task printClasspath {
    doLast {
        // NOTE don't forget to exclude the submod dev jar
        configurations.compileClasspath.each { println "\"" + (it.toString().replace("\\", "/")) + "\"," }
    }
}

task additionalCopy(type: Copy) {
    from file("${project.buildDir}/libs/$archivesBaseName-${version}-mc${project.minecraft_version}-fabric.jar")
    into file("${project.buildDir}/to_upload")
}